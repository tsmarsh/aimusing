{
  "graphlettes": [
    {
      "path": "/work/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-work",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Query {\n  getByTitle(title: String, at: Float): Work\n  getByAuthor(name: String, at: Float): [Work]\n  getById(id: ID, at: Float): Work\n  getByPlot(id: ID, at: Float): [Work]\n  getByStyle(id: ID, at: Float): [Work]\n  getByTimeline(id: ID, at: Float): [Work]\n}\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/chapter/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-chapter",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n}\n\ntype Query {\n  getByTitle(title: String, at: Float): [Chapter]\n  getById(id: ID, at: Float): Chapter\n  getByWork(id: ID, at: Float): [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/character/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-character",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Query {\n  getByName(name: String, at: Float): [Character]\n  getById(id: ID, at: Float): Character\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/characternote/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-characternote",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n}\n\ntype Query {\n  getByKeywords(keywords: [String], at: Float): [CharacterNote]\n  getById(id: ID, at: Float): CharacterNote\n  getByCharacter(id: ID, at: Float): [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/characterevent/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-characterevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype Query {\n  getById(id: ID, at: Float): CharacterEvent\n  getByCharacter(id: ID, at: Float): [CharacterEvent]\n  getByEvent(id: ID, at: Float): [CharacterEvent]\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/location/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-location",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Query {\n  getByKeywords(keywords: [String], at: Float): [CharacterNote]\n  getByName(name: String, at: Float): [Location]\n  getById(id: ID, at: Float): Location\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/plot/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-plot",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Query {\n  getById(id: ID, at: Float): Plot\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/style/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-style",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Query {\n  getById(id: ID, at: Float): Style\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/event/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-event",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Query {\n  getByName(name: String, at: Float): Event\n  getById(id: ID, at: Float): Event\n  getByLocation(id: ID, at: Float): [Event]\n  getByTimeline(id: ID, at: Float): [Event]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/sceneevent/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-sceneevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n}\n\ntype Query {\n  getById(id: ID, at: Float): SceneEvent\n  getByEvent(id: ID, at: Float): [SceneEvent]\n  getByScene(id: ID, at: Float): [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/scene/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-scene",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  timeline: Timeline\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  timeline: Timeline\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Query {\n  getByTitle(title: String, at: Float): Scene\n  getById(id: ID, at: Float): Scene\n  getByChapter(id: ID, at: Float): [Scene]\n  getByStyle(id: ID, at: Float): [Scene]\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/timeline/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-timeline",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": "scalar Date\n\ntype Work {\n  title: String!\n  genre: String\n  author: String\n  style: Style\n  id: ID\n  chapters: [Chapter]\n}\n\ntype Chapter {\n  title: String!\n  order: Int\n  work: Work\n  id: ID\n  scenes: [Scene]\n}\n\ntype Character {\n  name: String!\n  role: String\n  archetype: String\n  description: String\n  id: ID\n  characterEvents: [CharacterEvent]\n  characterNotes: [CharacterNote]\n}\n\ntype CharacterNote {\n  character: Character\n  keywords: [String]\n  note: String!\n  id: ID\n}\n\ntype CharacterEvent {\n  event: Event!\n  character: Character!\n  id: ID\n}\n\ntype Location {\n  name: String!\n  description: String\n  keywords: [String]\n  id: ID\n  events: [Event]\n}\n\ntype Plot {\n  name: String!\n  description: String\n  structure: String\n  id: ID\n  works: [Work]\n}\n\ntype Style {\n  tone: String\n  voice: String\n  literaryInfluences: [String]\n  pacing: String\n  id: ID\n  works: [Work]\n  scenes: [Scene]\n}\n\ntype Event {\n  name: String!\n  description: String\n  eventDate: Date\n  type: String\n  location: Location\n  id: ID\n  characterEvents: [CharacterEvent]\n  sceneEvents: [SceneEvent]\n}\n\ntype SceneEvent {\n  event: Event\n  chapter: Chapter\n  id: ID\n}\n\ntype Scene {\n  title: String!\n  summary: String\n  location: String\n  characters: [Character]\n  chapter: Chapter\n  id: ID\n  sceneEvents: [SceneEvent]\n}\n\ntype Query {\n  getByName(name: String, at: Float): Timeline\n  getById(id: ID, at: Float): Timeline\n}\n\ntype Timeline {\n  name: String!\n  id: ID\n  events: [Event]\n  works: [Work]\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    }
  ],
  "port": 3033,
  "restlettes": [
    {
      "path": "/work/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-work",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "faker": "book.title"
          },
          "genre": {
            "type": "string",
            "faker": "book.genre"
          },
          "author": {
            "type": "string",
            "faker": "book.author"
          },
          "style_id": {
            "type": "string",
            "format": "uuid"
          },
          "timeline_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/chapter/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-chapter",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "minimum": 0
          },
          "work_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/character/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-character",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "faker": "person.fullName"
          },
          "role": {
            "type": "string",
            "faker": "person.jobtype"
          },
          "archetype": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "faker": "person.bio"
          }
        }
      }
    },
    {
      "path": "/characternote/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-characternote",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "note"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "character_id": {
            "type": "string",
            "format": "uuid"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "faker": "word.adjective"
          },
          "note": {
            "type": "string"
          }
        }
      }
    },
    {
      "path": "/characterevent/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-characterevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "event_id",
          "character_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "event_id": {
            "type": "string",
            "format": "uuid"
          },
          "character_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/location/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-location",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "faker": "word.adjective"
          }
        }
      }
    },
    {
      "path": "/plot/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-plot",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "structure": {
            "type": "string"
          }
        }
      }
    },
    {
      "path": "/style/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-style",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tone": {
            "type": "string"
          },
          "voice": {
            "type": "string"
          },
          "literaryInfluences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pacing": {
            "type": "string"
          }
        }
      }
    },
    {
      "path": "/event/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-event",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "type": "string"
          },
          "timeline_id": {
            "type": "string",
            "format": "uuid"
          },
          "location_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/sceneevent/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-sceneevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "event_id": {
            "type": "string",
            "format": "uuid"
          },
          "chapter_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/scene/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-scene",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "characters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "chapter_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    {
      "path": "/timeline/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-timeline",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
          "directConnection": true
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  ]
}